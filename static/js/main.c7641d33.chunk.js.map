{"version":3,"sources":["Display.js","spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","class","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+MAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,mBACNC,SAAU,eAyBCE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAID,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BZU,EAAS,SAACP,GAChB,OACI,yBAAKQ,MAAM,oBACX,yBAAKA,MAAM,sBAAsBR,EAAMS,WAM3CF,EAAQG,aAAe,CACnBD,QAAQ,WAGGF,QCVTI,E,kDACF,WAAYX,GAAO,IAAD,8BACd,cAAMA,IAEDY,MAAM,CAACX,IAAI,KAAMY,aAAa,IAHrB,E,gEAMG,IAAD,OAEhBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAY,EAAKC,SAAS,CAAClB,IAAKiB,EAASE,OAAOC,cAChD,SAACC,GAAD,OAAO,EAAKH,SAAS,CAACN,aAAaS,EAAIb,e,+BAM3C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMX,IAChC,wCAAcsB,KAAKX,MAAMC,aAAzB,MAGNU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMX,IACpC,kBAAC,EAAD,CAAeA,IAAKsB,KAAKX,MAAMX,MAG7B,kBAAC,EAAD,CAASQ,QAAQ,+B,GAzBhBe,IAAMC,WA8BxBC,IAASC,OACL,kBAAC,EAAD,MAAOC,SAASC,cAAc,W","file":"static/js/main.c7641d33.chunk.js","sourcesContent":["import './Display.css';\nimport React from 'react';\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: 'sun'\n  },\n  winter: {\n    text: 'Burr it is cold!',\n    iconName: 'snowflake'\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'summer' : 'winter';\n  } else {\n    return lat > 0 ? 'winter' : 'summer';\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\r\n\r\nconst Spinner =(props)=> {\r\nreturn (\r\n    <div class=\"ui active dimmer\">\r\n    <div class=\"ui big text loader\">{props.message }</div>\r\n    </div>\r\n\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message:'Loading'\r\n};\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './Display';\r\nimport Spinner from './spinner'\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={lat:null, errorMessage:''};\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position)=>this.setState({lat: position.coords.latitude}),\r\n            (err)=>this.setState({errorMessage:err.message})\r\n        );\r\n    }\r\n\r\n    render(){\r\n       \r\n        if (this.state.errorMessage && !this.state.lat) {\r\n            return <div>  Error:{this.state.errorMessage} </div>\r\n        }\r\n\r\n        if (!this.state.errorMessage && this.state.lat){\r\n        return <SeasonDisplay lat={this.state.lat}/>\r\n        }\r\n        \r\n        return ( <Spinner message='Please accept location'/>);\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,document.querySelector('#root')\r\n)"],"sourceRoot":""}